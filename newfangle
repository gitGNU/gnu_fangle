#! /usr/bin/awk -f
# newfangle - fully featured notangle replacement in awk
#
#  Copyright (C) Sam Liddicott 2009
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#


# NOTE: Arnold Robbins public domain getopt for awk is also used:
# getopt.awk --- do C library getopt(3) function in awk
#
# Arnold Robbins, arnold@skeeve.com, Public Domain
#
# Initial version: March, 1991
# Revised: May, 1993


function getopt(argc, argv, options,    thisopt, i)
{
    if (length(options) == 0)    # no options given
        return -1
    if (argv[Optind] == "--") {  # all done
        Optind++
        _opti = 0
        return -1
    } else if (argv[Optind] !~ /^-[^: \t\n\f\r\v\b]/) {
        _opti = 0
        return -1
    }
    if (_opti == 0)
        _opti = 2
    thisopt = substr(argv[Optind], _opti, 1)
    Optopt = thisopt
    i = index(options, thisopt)
    if (i == 0) {
        if (Opterr)
            printf("%c -- invalid option\n",
                                  thisopt) > "/dev/stderr"
        if (_opti >= length(argv[Optind])) {
            Optind++
            _opti = 0
        } else
            _opti++
        return "?"
    }
    if (substr(options, i + 1, 1) == ":") {
        # get option argument
        if (length(substr(argv[Optind], _opti + 1)) > 0)
            Optarg = substr(argv[Optind], _opti + 1)
        else
            Optarg = argv[++Optind]
        _opti = 0
    } else
        Optarg = ""
    if (_opti == 0 || _opti >= length(argv[Optind])) {
        Optind++
        _opti = 0
    } else
        _opti++
    return thisopt
}

function error(message)
{
  print "ERROR: " FILENAME ":" FNR " " message > "/dev/stderr";
  exit 1;
}
function warning(message)
{
  print "WARNING: " FILENAME ":" FNR " " message > "/dev/stderr";
  warnings++;
}
function new_mode_tracker(context, language, mode) {
  context[""] = 0;
  context[0, "language"] = language;
  context[0, "mode"] = mode;
}
function push_mode_tracker(context, language, mode,
  # local vars
  top)
{
  if (! ("" in context)) {
    split("", context);
    new_mode_tracker(context, language, mode);
  } else {
    top = context[""];
    if (context[top, "language"] == language && mode=="") mode = context[top, "mode"];
    top++;
    context[top, "language"] = language;
    context[top, "mode"] = mode;
    context[""] = top;
  }
}
function finalize_mode_tracker(context,
  # local vars
  top)
{
  if ( ("" in context) && context[""] != 0) return 0;
  return 1;
}
function mode_tracker(context, text, values, 
  # optional parameters
  # local vars
  mode, submodes, language,
  cindex, c, a, part, item, name, result, new_values, new_mode, 
  delimiters, terminators)
{
  cindex = context[""] + 0;
  mode = context[cindex, "mode"];
  language = context[cindex, "language" ];
  submodes=modes[language, mode, "submodes"];

  if ((language, mode, "delimiters") in modes) {
    delimiters = modes[language, mode, "delimiters"];
    if (length(submodes)>0) submodes = submodes "|";
    submodes=submodes delimiters;
  } else delimiters="";
  if ((language, mode, "terminators") in modes) {
    terminators = modes[language, mode, "terminators"];
    if (length(submodes)>0) submodes = submodes "|";
    submodes=submodes terminators;
  } else terminators="";
  while((cindex >= 0) && length(text)) {
    if (match(text, "(" submodes ")", a)) {
      if (RLENGTH<1) {
        error(sprintf("Internal error, matched zero length submode, should be impossible - likely regex computation error\n" \
		"Language=%s\nmode=%s\nmatch=%s\n", language, mode, submodes));
      }
      part = substr(text, 1, RSTART -1);
      item = item part;
      if (match(a[1], "^" terminators "$")) {
#printf("%2d EXIT  MODE [%s] by [%s] [%s]\n", cindex, mode, a[1], text) > "/dev/stderr"
        context[cindex, "values", ++context[cindex, "values"]] = item;
        delete context[cindex];
        context[""] = --cindex;
        if (cindex>=0) {
          mode = context[cindex, "mode"];
          language = context[cindex, "language"];
            submodes=modes[language, mode, "submodes"];

            if ((language, mode, "delimiters") in modes) {
              delimiters = modes[language, mode, "delimiters"];
              if (length(submodes)>0) submodes = submodes "|";
              submodes=submodes delimiters;
            } else delimiters="";
            if ((language, mode, "terminators") in modes) {
              terminators = modes[language, mode, "terminators"];
              if (length(submodes)>0) submodes = submodes "|";
              submodes=submodes terminators;
            } else terminators="";
        }
        item = item a[1];
        text = substr(text, 1 + length(part) + length(a[1]));
      }
      else if (match(a[1], "^" delimiters "$")) {
        if (cindex==0) {
          context[cindex, "values", ++context[cindex, "values"]] = item;
          item = "";
        } else {
          item = item a[1];
        }
        text = substr(text, 1 + length(part) + length(a[1]));
      }
 else if ((language, a[1], "terminators") in modes) {
        #check if new_mode is defined
        item = item a[1];
#printf("%2d ENTER MODE [%s] in [%s]\n", cindex, a[1], text) > "/dev/stderr"
        text = substr(text, 1 + length(part) + length(a[1]));
        context[""] = ++cindex;
        context[cindex, "mode"] = a[1];
        context[cindex, "language"] = language;
        mode = a[1];
          submodes=modes[language, mode, "submodes"];

          if ((language, mode, "delimiters") in modes) {
            delimiters = modes[language, mode, "delimiters"];
            if (length(submodes)>0) submodes = submodes "|";
            submodes=submodes delimiters;
          } else delimiters="";
          if ((language, mode, "terminators") in modes) {
            terminators = modes[language, mode, "terminators"];
            if (length(submodes)>0) submodes = submodes "|";
            submodes=submodes terminators;
          } else terminators="";
      } else {
        error(sprintf("Submode '%s' set unknown mode in text: %s\nLanguage %s Mode %s\n", a[1], text, language, mode));
        text = substr(text, 1 + length(part) + length(a[1]));
      }
    }
else {
      context[cindex, "values", ++context[cindex, "values"]] = item text;
      text = "";
      item = "";
    }
  }

  context["item"] = item;

  if (length(item)) context[cindex, "values", ++context[cindex, "values"]] = item;
  return text;
}
function transform_escape(s, r, text,
    # optional
    max, 
	# local vars
	c)
{
  for(c=1; c <= max && (c in s); c++) {
    gsub(s[c], r[c], text);
  }
  return text;
}
function mode_escaper(context, s, r, src,
  c, cp, cpl)
{
	for(c = context[""]; c >= 0; c--) {
		if ( (context[c, "language"], context[c, "mode"]) in escapes) {
			cpl = escapes[context[c, "language"], context[c, "mode"]];
			for (cp = 1; cp <= cpl; cp ++) {
				++src;
				s[src] = escapes[context[c, "language"], context[c, "mode"], c, "s"];
				r[src] = escapes[context[c, "language"], context[c, "mode"], c, "r"];
			}
		}
	}
	return src;
}
function parse_chunk_args(language, text, values, mode,
  # local vars
  c, context, rest)
{
  split("", context);
  new_mode_tracker(context, language, mode);
  rest = mode_tracker(context, text, values);
  # extract values
  for(c=1; c <= context[0, "values"]; c++) {
    values[c] = context[0, "values", c];
  }
  return rest;
}
function new_chunk(chunk_name, params,
  # local vars
  p, append )
{
  # HACK WHILE WE CHANGE TO ( ) for PARAM CHUNKS
  gsub("\\(\\)$", "", chunk_name);
  if (! (chunk_name in chunk_names)) {
    if (debug) print "New chunk " chunk_name;
    chunk_names[chunk_name];
    for (p in params) {
      chunks[chunk_name, p] = params[p];
    }
    if ("append" in params) {
      append=params["append"];
      if (! (append in chunk_names)) {
        warning("Chunk " chunk_name " is appended to chunk " append " which is not defined yet");
        new_chunk(append);
      }
      chunk_include(append, chunk_name);
      chunk_line(append, ORS);
    }
  }
  active_chunk = chunk_name;
  prime_chunk(chunk_name);
}

function prime_chunk(chunk_name)
{
  chunks[chunk_name, "part", ++chunks[chunk_name, "part"] ] = \
         chunk_name SUBSEP "chunklet" SUBSEP "" ++chunks[chunk_name, "chunklet"];
  chunks[chunk_name, "part", chunks[chunk_name, "part"], "FILENAME"] = FILENAME;
  chunks[chunk_name, "part", chunks[chunk_name, "part"], "LINENO"] = FNR + 1;
}

function chunk_line(chunk_name, line){
  chunks[chunk_name, "chunklet", chunks[chunk_name, "chunklet"],
         ++chunks[chunk_name, "chunklet", chunks[chunk_name, "chunklet"], "line"]  ] = line;
}

function chunk_include(chunk_name, chunk_ref, indent, tail)
{
  chunks[chunk_name, "part", ++chunks[chunk_name, "part"] ] = chunk_ref;
  chunks[chunk_name, "part", chunks[chunk_name, "part"], "type" ] = part_type_chunk;
  chunks[chunk_name, "part", chunks[chunk_name, "part"], "indent" ] = indent_string(indent);
  chunks[chunk_name, "part", chunks[chunk_name, "part"], "tail" ] = tail;
  prime_chunk(chunk_name);
}

function indent_string(indent) {
  return sprintf("%" indent "s", "");
}
function output_chunk_names(   c, prefix, suffix) 
{
  if (notangle_mode) {
    prefix="<<";
    suffix=">>";
  }
  for (c in chunk_names) {
    print prefix c suffix "\n";
  }
}
function output_chunks(  a) 
{
  for (a in chunk_names) {
    output_chunk(chunk_names[a]);
  }
}

function output_chunk(chunk) {
  newline = 1;
  lineno_needed = linenos;

  write_chunk(chunk);
}

function write_chunk(chunk_name) {
  split("", context);
  return write_chunk_r(chunk_name, context);
}
function write_chunk_r(chunk_name, context, indent, tail,
  # optional vars
  chunk_path, chunk_args, 
  s, r, src, new_src, 
  # local vars
  chunk_params, part, max_part, part_line, frag, max_frag, text, 
  chunklet, only_part, call_chunk_args)
{
  if (match(chunk_name, "^(.*)\\[([0-9]*)\\]$", chunk_name_parts)) {
    chunk_name = chunk_name_parts[1];
    only_part = chunk_name_parts[2];
  }
  split("", context);
  new_mode_tracker(context, chunks[chunk_name, "language"], "");
  split(chunks[chunk_name, "params"], chunk_params, " *; *");
  if (! (chunk_name in chunk_names)) {
    error(sprintf(_"The root module <<%s>> was not defined.\nUsed by: %s",\
                  chunk_name, chunk_path));
  }

  max_part = chunks[chunk_name, "part"];
  for(part = 1; part <= max_part; part++) {
    if (! only_part || part == only_part) {
      if (linenos && (chunk_name SUBSEP "part" SUBSEP part SUBSEP "FILENAME" in chunks)) {
        a_filename = chunks[chunk_name, "part", part, "FILENAME"];
        a_lineno = chunks[chunk_name, "part", part, "LINENO"];
        if (a_filename != filename || a_lineno != lineno) {
          lineno_needed++;
        }
      }

      chunklet = chunks[chunk_name, "part", part];
      if (chunks[chunk_name, "part", part, "type"] == part_type_chunk) {
        if (match(chunklet, "^([^\\[\\(]*)\\((.*)\\)$", chunklet_parts)) {
          chunklet = chunklet_parts[1];
          parse_chunk_args("", chunklet_parts[2], call_chunk_args, "(");
          for (c in call_chunk_args) {
            call_chunk_args[c] = expand_chunk_args(call_chunk_args[c], chunk_params, chunk_args);
          }
        } else {
          split("", call_chunk_args);
        }
        # update the transforms arrays
        new_src = mode_escaper(context, s, r, src);
        write_chunk_r(chunklet, context,
                    chunks[chunk_name, "part", part, "indent"] indent,
                    chunks[chunk_name, "part", part, "tail"],
                    chunk_path "\n         " chunk_name,
                    call_chunk_args,
        			s, r, new_src);
      } else if (chunklet SUBSEP "line" in chunks) {
        max_frag = chunks[chunklet, "line"];
        for(frag = 1; frag <= max_frag; frag++) {
          if (newline && lineno_needed && ! lineno_suppressed) {
            filename = a_filename;
            lineno = a_lineno;
            print "#line " lineno " \"" filename "\"\n"
            lineno_needed = 0;
          }

          text = chunks[chunklet, frag];
         
          /* check params */
          text = expand_chunk_args(text, chunk_params, chunk_args);

         if (text == "\n") {
            lineno++;
            if (part == max_part && frag == max_frag && length(chunk_path)) {
              text = "";
              break;
            } else {
              newline = 1;
            }
          } else if (length(text) || length(tail)) {
            if (newline) text = indent text;
            newline = 0;
          }

          text = text tail;
          mode_tracker(context, text);
          print transform_escape(s, r, text, src);
          if (linenos) {
            lineno_suppressed = substr(lastline, length(lastline)) == "\\";
          }
        }
      } else {
        # empty last chunklet
      }
    }
  }
  if (! finalize_mode_tracker(context)) {
    error(sprintf(_"Module %s did not close context properly.\nUsed by: %s\n", chunk_name, chunk_path));
  }
}
function expand_chunk_args(text, params, args,  
  p, text_array, next_text, v, t, l)
{
  if (split(text, text_array, "\\${")) {
    for(p in params) {
      v[params[p]]=args[p];
    }
    text=text_array[1];
    for(t=2; t in text_array; t++) {
      if (match(text_array[t], "^([a-zA-Z_][a-zA-Z0-9_]*)}", l) &&
          l[1] in v) 
      {
        text = text v[l[1]] substr(text_array[t], length(l[1])+2);
      } else {
        text = text "${" text_array[t];
      }
    }
  }

  return text;
}
BEGIN {
  part_type_chunk=1;
  SUBSEP=",";
  modes["", "",  "submodes" ]="\\\\|\"|'|{|\\(|\\[";
  modes["", "",  "delimiters"]=" *, *";
  modes["", "\\", "terminators"]=".";
  modes["", "\"", "submodes" ]="\\\\";
  modes["", "\"", "terminators"]="\"";
  escapes["", "\"", ++escapes["", "\""], "s"]="\\";
  escapes["", "\"",   escapes["", "\""], "r"]="\\\\";
  escapes["", "\"", ++escapes["", "\""], "s"]="\"";
  escapes["", "\"",   escapes["", "\""], "r"]="\\" "\"";
  escapes["", "\"", ++escapes["", "\""], "s"]="\n";
  escapes["", "\"",   escapes["", "\""], "r"]="\\n";
  modes["", "'", "submodes" ]="\\\\";
  modes["", "'", "terminators"]="'";
  escapes["", "'", ++escapes["", "'"], "s"]="\\";
  escapes["", "'",   escapes["", "'"], "r"]="\\\\";
  escapes["", "'", ++escapes["", "'"], "s"]="'";
  escapes["", "'",   escapes["", "'"], "r"]="\\" "'";
  escapes["", "'", ++escapes["", "'"], "s"]="\n";
  escapes["", "'",   escapes["", "'"], "r"]="\\n";
  modes["", "{",  "submodes" ]="\\\\|\"|{|\\(|\\[|'|/\\*";
  modes["", "{",  "delimiters"]=" *, *";
  modes["", "{",  "terminators"]="}";
  modes["", "[",  "submodes" ]="\\\\|\"|{|\\(|\\[|'|/\\*";
  modes["", "[",  "delimiters"]=" *, *";
  modes["", "[",  "terminators"]="\\]";
  modes["", "(",  "submodes" ]="\\\\|\"|{|\\(|\\[|'|/\\*";
  modes["", "(",  "delimiters"]=" *, *";
  modes["", "(",  "terminators"]="\\)";

  modes["c", "",  "submodes" ]="\\\\|\"|'|{|\\(|\\[";
  modes["c", "",  "delimiters"]=" *, *";
  modes["c", "\\", "terminators"]=".";
  modes["c", "\"", "submodes" ]="\\\\";
  modes["c", "\"", "terminators"]="\"";
  escapes["c", "\"", ++escapes["c", "\""], "s"]="\\";
  escapes["c", "\"",   escapes["c", "\""], "r"]="\\\\";
  escapes["c", "\"", ++escapes["c", "\""], "s"]="\"";
  escapes["c", "\"",   escapes["c", "\""], "r"]="\\" "\"";
  escapes["c", "\"", ++escapes["c", "\""], "s"]="\n";
  escapes["c", "\"",   escapes["c", "\""], "r"]="\\n";
  modes["c", "'", "submodes" ]="\\\\";
  modes["c", "'", "terminators"]="'";
  escapes["c", "'", ++escapes["c", "'"], "s"]="\\";
  escapes["c", "'",   escapes["c", "'"], "r"]="\\\\";
  escapes["c", "'", ++escapes["c", "'"], "s"]="'";
  escapes["c", "'",   escapes["c", "'"], "r"]="\\" "'";
  escapes["c", "'", ++escapes["c", "'"], "s"]="\n";
  escapes["c", "'",   escapes["c", "'"], "r"]="\\n";
  modes["c", "{",  "submodes" ]="\\\\|\"|{|\\(|\\[|'|/\\*";
  modes["c", "{",  "delimiters"]=" *, *";
  modes["c", "{",  "terminators"]="}";
  modes["c", "[",  "submodes" ]="\\\\|\"|{|\\(|\\[|'|/\\*";
  modes["c", "[",  "delimiters"]=" *, *";
  modes["c", "[",  "terminators"]="\\]";
  modes["c", "(",  "submodes" ]="\\\\|\"|{|\\(|\\[|'|/\\*";
  modes["c", "(",  "delimiters"]=" *, *";
  modes["c", "(",  "terminators"]="\\)";
  modes["c", "", "submodes"] = modes["c", "", "submodes"] "|" "/\\*";
  modes["c", "/*", "terminators"]="\\*/";
  modes["c", "", "submodes"] = modes["c", "", "submodes"] "|" "//";
  modes["c", "//", "terminators"]="\n";
  escapes["c", "//", ++escapes["c", "//"], "s"]="\n";
  escapes["c", "//",   escapes["c", "//"], "r"]="\n//";
  modes["c", "", "submodes"] = modes["c", "", "submodes"] "|" "#";
  modes["c", "#", "submodes" ]="\\\\";
  modes["c", "#", "terminators"]="\n";
  escapes["c", "#", ++escapes["c", "#"], "s"]="\n";
  escapes["c", "#",   escapes["c", "#"], "r"]="\\\\\n";

  modes["awk", "",  "submodes" ]="\\\\|\"|'|{|\\(|\\[";
  modes["awk", "",  "delimiters"]=" *, *";
  modes["awk", "\\", "terminators"]=".";
  modes["awk", "\"", "submodes" ]="\\\\";
  modes["awk", "\"", "terminators"]="\"";
  escapes["awk", "\"", ++escapes["awk", "\""], "s"]="\\";
  escapes["awk", "\"",   escapes["awk", "\""], "r"]="\\\\";
  escapes["awk", "\"", ++escapes["awk", "\""], "s"]="\"";
  escapes["awk", "\"",   escapes["awk", "\""], "r"]="\\" "\"";
  escapes["awk", "\"", ++escapes["awk", "\""], "s"]="\n";
  escapes["awk", "\"",   escapes["awk", "\""], "r"]="\\n";
  modes["awk", "'", "submodes" ]="\\\\";
  modes["awk", "'", "terminators"]="'";
  escapes["awk", "'", ++escapes["awk", "'"], "s"]="\\";
  escapes["awk", "'",   escapes["awk", "'"], "r"]="\\\\";
  escapes["awk", "'", ++escapes["awk", "'"], "s"]="'";
  escapes["awk", "'",   escapes["awk", "'"], "r"]="\\" "'";
  escapes["awk", "'", ++escapes["awk", "'"], "s"]="\n";
  escapes["awk", "'",   escapes["awk", "'"], "r"]="\\n";
  modes["awk", "{",  "submodes" ]="\\\\|\"|{|\\(|\\[|'|/\\*";
  modes["awk", "{",  "delimiters"]=" *, *";
  modes["awk", "{",  "terminators"]="}";
  modes["awk", "[",  "submodes" ]="\\\\|\"|{|\\(|\\[|'|/\\*";
  modes["awk", "[",  "delimiters"]=" *, *";
  modes["awk", "[",  "terminators"]="\\]";
  modes["awk", "(",  "submodes" ]="\\\\|\"|{|\\(|\\[|'|/\\*";
  modes["awk", "(",  "delimiters"]=" *, *";
  modes["awk", "(",  "terminators"]="\\)";
  modes["awk", "", "submodes"] = modes["awk", "", "submodes"] "|" "#";
  modes["awk", "#", "terminators"]="\n";
  escapes["awk", "#", ++escapes["awk", "#"], "s"]="\n";
  escapes["awk", "#",   escapes["awk", "#"], "r"]="\n#";
  debug=0;
  linenos=0;
  notangle_mode=0;
  root="*";
  tabs = "";

  Optind = 1    # skip ARGV[0]
  while(getopt(ARGC, ARGV, "R:LdT:hr")!=-1) {
    if (Optopt == "R") root = Optarg;
    else if (Optopt == "r") root="";
    else if (Optopt == "L") linenos = 1;
    else if (Optopt == "d") debug = 1;
    else if (Optopt == "T") tabs = indent_string(Optarg+0);
    else if (Optopt == "h") help();
    else if (Optopt == "?") help();
  }
  for (i=1; i<Optind; i++) { ARGV[i]=""; }
}
/^\\Chunk{/ {
  if (match($0, "^\\\\Chunk{ *([^ ,}]*),?(.*)}", line)) {
    next_chunk_name = line[1];
    get_chunk_args(line[2], next_chunk_args);
  }
  next;
}
/^\\begin{lstlisting}|^\\begin{Chunk}/ {
  if (match($0, "}.*[[,] *name= *{? *([^], }]*)", line)) {
    new_chunk(line[1]);
  } else {
    new_chunk(next_chunk_name, next_chunk_args);
  }
  chunking=1;
  next;
}
/^[<]<.*[>]>=/ {
  if (match($0, "^[<]<(.*)[>]>= *$", line)) {
    chunking=1;
    notangle_mode=1;
    new_chunk(line[1]);
    next;
  }
}
/^\\[e]nd{lstlisting}|^\\[e]nd{Chunk}/ {
  chunking=0;
  active_chunk="";
  next;
}
/^@ *$/ {
  chunking=0;
  active_chunk="";
}
! chunking { next; }
length(active_chunk) {
  if (length(tabs)) {
    gsub("\t", tabs);
  }
  chunk = $0;
  indent = 0;
  while(match(chunk, 
              "([=]<\\\\chunkref{([^}>]*)}(\\(.*\\)|)>|<<([a-zA-Z_][-a-zA-Z0-9_]*)>>)", 
              line)\
  ) {
    chunklet = substr(chunk, 1, RSTART - 1);
    indent += length(chunklet);
    chunk_line(active_chunk, chunklet);
    chunk = substr(chunk, RSTART + RLENGTH);
    if (substr(line[1], 1, 1) == "=") {
      # chunk name up to }
  	# FILTHY HACK
   gsub("\\\\#", "#", line[3]);
   gsub("\\\\textbackslash{}", "\\", line[3]);
      chunk_include(active_chunk, line[2] line[3], indent);
    } else if (substr(line[1], 1, 1) == "<") {
      chunk_include(active_chunk, line[4], indent);
    } else {
      error("Unknown chunk fragment: " line[1]);
    }
  }
  chunk_line(active_chunk, chunk);
  chunk_line(active_chunk, "\n");
}
END {
  if (debug) {
    print "------ chunk names "
    output_chunk_names();
    print "====== chunks"
    output_chunks();
    print "++++++ debug"
    for (a in chunks) {
      print a "=" chunks[a];
    }
  }
  ORS="";
  if (length(root)) output_chunk(root);
  else output_chunk_names();
}
function get_chunk_args(text, values,
  # optional parameters
  path, # hierarchical precursors
  # local vars
  a, name)
{
  split("", next_chunk_args);
  while(length(text)) {
    if (match(text, "^ *}(.*)", a)) {
      return a[1];
    }
    if (! match(text, " *([^,=]*[^,= ]) *(([,=]) *(([^,}]*) *,* *(.*))|)$", a)) {
      return text;
    }
    name=a[1];
    if (a[3] == "=") {
      if (substr(a[4],1,1) == "{") {
        text = get_chunk_args(substr(a[4],2), values, path name SUBSEP);
      } else {
        values[path name]=a[5];
        text = a[6];
      }
    } else {
      values[path name]="";
      text = a[2];
    }
  }
  return text;
}
