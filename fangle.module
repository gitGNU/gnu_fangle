#\DeclareLyXModule{Fangle Literate Listings}
#DescriptionBegin
#  Fangle literate listings allow one to write
#   literate programs after the fashion of noweb, but without having
#   to use noweave to generate the documentation. Instead the listings
#   package is extended in conjunction with the noweb package to implement
#   to code formating directly as latex.
#  The fangle awk script
#DescriptionEnd

#fangle - fully featured notangle replacement in awk
#
# Copyright (C) 2009-2010 Sam Liddicott <sam@liddicott.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


Format 11

AddToPreamble
\usepackage{listings}%
\usepackage{noweb}%
\usepackage{xargs}%
\renewcommand{\code}[1]{\texttt{#1}}%
\lstnewenvironment{Chunk}{\relax}{\relax}%
\lstset{numbers=left, stepnumber=5, numbersep=5pt,
        breaklines=false,basicstyle=\ttfamily,
        numberstyle=\tiny, language=C}%
\lstset{escapeinside={=<}{>}}%
%\makeatletter
%somehow re-defining maketitle gives us a left-aligned title
%which is extactly what our specially formatted title needs!
\global\let\fangle@lst@maketitle\lst@maketitle%
\global\def\lst@maketitle{}%
\def\Chunk#1{%
  \lstset{title={\fanglecaption},name=#1}%
  \global\edef\lst@chunkname{\lst@intname}%
}%
\def\lst@chunkname{\empty}%
\lst@Key{params}\relax{\def\fangle@chunk@params{#1}}%
\lst@Key{append}\relax{\def\fangle@chunk@append{#1}}%
\def\fanglecaption{\protect\fangle@caption}%
\newcounter{fangle@chunkcounter}%
\def\fangle@caption{%
  \edef\chunkcount{lst-chunk-\lst@intname}%
  \@ifundefined{\chunkcount}{%
    \expandafter\gdef\csname \chunkcount\endcsname{0}%
    \setcounter{fangle@chunkcounter}{\csname \chunkcount\endcsname}%
    \let\prevchunkname\relax%
  }{%
    \setcounter{fangle@chunkcounter}{\csname \chunkcount\endcsname}%
    \edef\prevchunkname{\lst@intname-\arabic{fangle@chunkcounter}}%
  }%
  \addtocounter{fangle@chunkcounter}{1}%
  \global\expandafter\edef\csname \chunkcount\endcsname{\arabic{fangle@chunkcounter}}%
  \edef\chunkname{\lst@intname-\arabic{fangle@chunkcounter}}%
  \edef\firstchunkname{\lst@intname-1}%
  \addtocounter{fangle@chunkcounter}{1}%
  \edef\nextchunkname{\lst@intname-\arabic{fangle@chunkcounter}}%
  \@ifundefined{r@label-\nextchunkname}{\let\nextchunkname\relax}{}%
  \sublabel{\chunkname}%
% define this label for every chunk instance, so we
% can tell when we are the last chunk of this name
  \label{label-\chunkname}%
  \addcontentsline{lol}{lstlisting}{\lst@name~[\protect\subpageref{\chunkname}]}%
  \nwmargintag{%
    {%
      \nwtagstyle{}%
      \subpageref{\chunkname}%
    }%
  }%
%
  \moddef{%
    {\lst@name}%
    {%
      \nwtagstyle{}\/%
      \@ifundefined{fangle@chunk@params}{}{%
        (\fangle@chunk@params)%
      }%
      [\csname \chunkcount\endcsname]~%
      \subpageref{\firstchunkname}%
    }%
    \@ifundefined{fangle@chunk@append}{}{%
    \ifx{}\fangle@chunk@append{x}\else%
        ,~add~to~\fangle@chunk@append%
    \fi%
    }%
\global\def\fangle@chunk@append{}%
\lstset{append=x}%
  }%
%
  \ifx\relax\prevchunkname\endmoddef\else\plusendmoddef\fi%
%  \nwstartdeflinemarkup%
  \nwprevnextdefs{\prevchunkname}{\nextchunkname}%
%  \nwenddeflinemarkup%
}%
%\lst@BeginAspect{fangle}
%\lst@Key{fangle}{true}[t]{\lstKV@SetIf{#1}{true}}
\lst@AddToHookExe{PreSet}{\global\let\lst@intname\lst@chunkname}
\lst@AddToHook{Init}{}%\fangle@caption}
%\lst@EndAspect
\def\chunkref@args#1,{%
  \def\arg{#1}%
  \lst@ReplaceIn\arg\lst@filenamerpl%
  \arg%
  \@ifnextchar){\relax}{, \chunkref@args}%
}%
\newcommand\chunkref[2][0]{%
  \@ifnextchar({\chunkref@i{#1}{#2}}{\chunkref@i{#1}{#2}()}%
}%
\def\chunkref@i#1#2(#3){%
  \def\zero{0}%
  \def\chunk{#2}%
  \def\chunkno{#1}%
  \def\chunkargs{#3}%
  \ifx\chunkno\zero%
    \def\chunkname{#2-1}%
  \else%
    \def\chunkname{#2-\chunkno}%
  \fi%
  \let\lst@arg\chunk%
  \lst@ReplaceIn\chunk\lst@filenamerpl%
  \LA{%\moddef{%
    {\chunk}%
    {%
      \nwtagstyle{}\/%
      \ifx\chunkno\zero%
      \else%
      [\chunkno]%
      \fi%
      \ifx\chunkargs\empty%
      \else%
        (\chunkref@args #3,)%
      \fi%
      ~\subpageref{\chunkname}%
    }%
  }%
  \RA%\endmoddef%
}%
%
%\makeatother
EndPreamble

Style Chunk
  LatexType             Command
  LatexName             Chunk
  Margin                First_Dynamic
  LeftMargin            Chunk:xxx
  LabelSep              xx
  LabelType             Static
  LabelString           "Chunk:"
  Align                 Left
  PassThru              1

  LabelFont
    Family              Sans
    Size                Large
    Series              Bold
    Shape               Italic
    Color               red
  EndFont
End

InsetLayout Chunkref
  LyxType               charstyle
  LatexType             Command
  LatexName             chunkref
  PassThru              1
  LabelFont             
    Shape               Italic
    Color               red
  EndFont
End
